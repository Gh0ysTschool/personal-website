{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Game.svelte",
    "Map.svelte",
    "Player.svelte",
    "Unit.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"coffeescript\">import Game from './components/cw/Game.svelte';\n</script>\n<style lang=\"stylus\">.world {\n  display: flex;\n  flex-direction: column;\n  font-family: mono;\n  width: 100%;\n  height: 100%;\n}</style>\n<!-- prettier-ignore -->\n<div class=\"world\"><Game></Game></div>\n",
    "<script lang=\"javascript\">\r\n    import Map from './Map.svelte'\r\n    import Actions from './Actions.svelte'\r\n    import Player from './Player.svelte'\r\n    import places from './places.js'\r\n    import Factions from './factions.js'\r\n    let players, factions, phases, turn, phase, stage, choices, player, units\r\n    let G = {choices, players, player, places, phases, turn, phase, stage, units}\r\n    factions = Factions(G)\r\n    let playerF = ( faction='', units = [], doom=0, power=0 ) => ({ units,faction,doom,power,books:[] })\r\n    let unit = ( type = '', owner = {}, place = '', cost = 0, fight = 0, tier = 0, gather = 0) => ({ id:genid(), type, owner, place, cost, fight, gather, tier, gate:0 })\r\n    let fmove = ({unit, place}) => { unit.place = place; unit.gate=0;}\r\n    let genid = f => nonce++\r\n    let nonce = 0\r\n    G.players = Object.values(factions).map( f => playerF(f))\r\n    G.players.map( p => {\r\n        p.units = Array(6).fill(null).map( u => unit('cult',p,p.faction.start) )\r\n        p.units[2].gate=p.faction.start\r\n        places[p.faction.start].gate=1\r\n        p.power = 8\r\n    })\r\n    G.turn = {lim:1,pi:0}\r\n    let lim = true\r\n    let unlim = true\r\n    $: G.player = G.players[G.turn.pi%G.players.length]\r\n    $: G.units = G.players.reduce((acc,cur)=>[...acc,...cur.units],[])\r\n    G.choices = {\r\n        book : {\r\n            book : null,\r\n        },\r\n        awaken : {\r\n            unit : null,\r\n            place : null,\r\n        },\r\n        move : {\r\n            unit : null,\r\n            place : null,\r\n        },\r\n        fight : {\r\n            place : null,\r\n            enemy : null,\r\n        },\r\n        hire : {\r\n            place : null,\r\n        },\r\n        open : {\r\n            place : null,\r\n        },\r\n        summon : {\r\n            unit : null,\r\n            place : null,\r\n        },\r\n        steal : {\r\n            place : null,\r\n            unit : null,\r\n        },\r\n    }\r\n    G.phase = 'action'\r\n    let actions = []\r\n    G.stage = ''\r\n    let choose = x => {}\r\n    $: actions = (G.stage == '') ? G.phases[G.phase].options() : G.phases[G.phase].stages[G.stage].options()\r\n    $: G.choose = (G.stage == '') ? G.phases[G.phase].moves.choose : G.phases[G.phase].stages[G.stage].moves.choose\r\n    let endTurn  = t => { \r\n        G.turn.lim=1; \r\n        G.turn.pi++; \r\n        G.phase = (G.players.filter( p => p.power ).length) ? 'action' : 'gather';\r\n    }\r\n    let returnStage = f => {}\r\n    let interuptStage = (inphase,instage,inpi) => {\r\n        let rphase = ''+G.phase\r\n        let rstage = ''+G.stage\r\n        let rpi = 0+G.turn.pi\r\n        returnStage = f => {\r\n            G.phase = rphase\r\n            G.stage = rstage\r\n            G.turn.pi = rpi\r\n        }\r\n        G.phase = inphase\r\n        G.stage = instage\r\n        G.turn.pi = inpi\r\n    }\r\n    let checkbooks = () => \r\n        G.players.map( p => p.faction.bookreqs.map( (l,i) => {\r\n            if (Object.values(l)[0]()){\r\n                p.faction.bookreqs[i] = {'waiting...':f=>false}\r\n                interuptStage('book','book',G.players.indexOf(p))\r\n            }\r\n        }))\r\n    let setStage = s => {G.stage = s;}\r\n    let endStage = s => {if (G.phases[G.phase].stages[G.stage].next) {setStage(G.phases[G.phase].stages[G.stage].next)} else {endPhase();}}\r\n    let setPhase = p => {\r\n        G.phase = p\r\n        G.stage = G.phases[G.phase].start\r\n        checkbooks()\r\n    }\r\n    let endPhase = p => {\r\n        if (G.phases[G.phase].lim) \r\n            G.turn.lim--\r\n        G.phase = (G.phases[G.phase].next) ? G.phases[G.phase].next : 'action';\r\n        G.stage = ''\r\n        checkbooks()\r\n        console.log(G.phases.action.options().length)\r\n        if (G.phase == 'action' && !G.phases.action.options().length) endTurn()\r\n    }\r\n    G.phases = {\r\n        action : {\r\n            start : '',\r\n            options : f => Object.keys(G.phases).filter( p => G.phases[p].unlim || (G.phases[p].lim && G.turn.lim) ),\r\n            moves : {\r\n                choose : (np,c) => {if (np == '') setPhase(c)},\r\n                done : (np,c) => { G.player.power = 0; endTurn(); }\r\n            }\r\n        },\r\n        move : {\r\n            lim,\r\n            start : 'unit',\r\n            stages: {               \r\n                    unit : {\r\n                        next : 'place',\r\n                        options : f => G.player.units.filter( u => G.places[u.place] && !u.moved),\r\n                        moves : {\r\n                            choose : (np, c) => {\r\n                                if (np == 'unit' && G.player.units.filter( u => G.places[u.place] ).map( u => u.id ).includes(c.id) /*&& !(places[c.place].tokens.includes('iceage') && player.power < 2)*/) {\r\n                                    G.choices.move.unit = c\r\n                                    endStage()\r\n                                }\r\n                            },\r\n                            done : f => {\r\n                                endPhase()\r\n                                G.player.units.map( u => u.moved = 0)\r\n                            }\r\n                        },\r\n                    },\r\n                    place : {\r\n                        next : 'unit',\r\n                        options : f => G.places[G.choices.move.unit.place].adjacent,\r\n                        moves : {\r\n                            choose : (np, c) => {\r\n                                if (np == 'place' && G.places[G.choices.move.unit.place].adjacent.includes(c)) {\r\n                                    G.choices.move.place = c\r\n                                    G.choices.move.unit.gate = 0\r\n                                    G.choices.move.unit.place = c\r\n                                    G.choices.move.unit.moved = 1\r\n                                    G.player.power--\r\n                                    G.choices.move.unit = null\r\n                                    G.choices.move.place = null\r\n                                    forceRerender()\r\n                                    if (G.player.power == 0) {\r\n                                        endPhase()\r\n                                        G.player.units.map( u => u.moved = 0)\r\n                                    }\r\n                                    else endStage()\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n        },\r\n        fight : {\r\n            lim,\r\n            start : 'place',\r\n            stages : {\r\n                place : {\r\n                    next : 'enemy',\r\n                    options : f => Object.keys(G.places).filter( p => G.player.units.filter( u => u.place == p && u.fight != 0 ).length ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'place' && Object.keys(G.places).filter( p => G.player.units.filter( u => u.place == p && u.fight != 0 ).length ).includes(c) ) {\r\n                                G.choices.fight.place = c\r\n                                endStage()\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                enemy : {\r\n                    next : 'assignpkills',\r\n                    options : f => G.players.filter( p => p.faction.name != G.player.faction.name && p.units.filter( u => u.place == G.choices.fight.place).length ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'enemy' && G.players.filter( p => p.faction.name != G.player.faction.name && p.units.filter( u => u.place == G.choices.fight.place).length ) /*&& !(places[c.place].tokens.includes('iceage') && player.power < 2)*/) {\r\n                                G.choices.fight.enemy = c\r\n                                calcDamage(G.player)\r\n                                calcDamage(G.choices.fight.enemy)\r\n                                G.player.power--\r\n                                endPhase()\r\n                            }\r\n                        }\r\n                    },\r\n                }, \r\n                assignpkills : {\r\n                    next : 'assignpretreats',\r\n                    options : f => G.player.units.filter( u => u.place == G.choices.fight.place ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if ( G.player.units.filter( u => u.place == G.choices.fight.place ).map( u => u.id ).includes( c.id ) ) {\r\n                                c.place = ''\r\n                                G.player.kills--\r\n                                forceRerender()\r\n                            }\r\n                            if ( !G.player.kills || !G.player.units.filter( u => u.place == G.choices.fight.place ).length ) \r\n                                endStage()\r\n                        }\r\n                    }\r\n                },\r\n                assignpretreats : {\r\n                    next : 'placepretreats',\r\n                    options : f => G.player.units.filter( u => u.place == G.choices.fight.place ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if ( G.player.units.filter( u => u.place == G.choices.fight.place ).map( u => u.id ).includes( c.id ) ) {\r\n                                G.choice.fight.unit = c\r\n                                endStage()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                placepretreats : {\r\n                    next : 'assignekills',\r\n                    options : f => G.places[G.choices.fight.unit.place].adjacent.filter( p => !G.choices.fight.enemy.units.map( u => u.place ).includes(p)),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if ( G.places[G.choices.fight.unit.place].adjacent.filter( p => !G.choices.fight.enemy.units.map( u => u.place ).includes(p)).includes( c ) ) {\r\n                                G.choices.fight.unit.place = c\r\n                                G.player.pains--\r\n                                forceRerender()\r\n                            }\r\n                            if ( !G.player.pains || !G.player.units.filter( u => u.place == G.choices.fight.place ).length ) \r\n                                endStage()\r\n                            else\r\n                                setStage('assignpretreats')\r\n                        }\r\n                    }\r\n                },\r\n                assignekills : {\r\n                    next : 'assigneretreats',\r\n                    options : f => G.choices.fight.enemy.units.filter( u => u.place == G.choices.fight.place ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if ( G.choices.fight.enemy.units.filter( u => u.place == G.choices.fight.place ).map( u => u.id ).includes( c.id ) ) {\r\n                                c.place = ''\r\n                                G.choices.fight.enemy.kills--\r\n                                forceRerender()\r\n                            }\r\n                            if ( !G.choices.fight.enemy.kills || !G.choices.fight.enemy.units.filter( u => u.place == G.choices.fight.place ).length ) \r\n                                endStage()\r\n                        }\r\n                    }\r\n                },\r\n                assigneretreats : {\r\n                    next : 'placeeretreats',\r\n                    options : f => G.choices.fight.enemy.units.filter( u => u.place == G.choices.fight.place ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if ( G.choices.fight.enemy.units.filter( u => u.place == G.choices.fight.place ).map( u => u.id ).includes( c.id ) ) {\r\n                                G.choice.fight.unit = c\r\n                                endStage()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                placeeretreats : {\r\n                    options : f => G.places[choices.fight.unit.place].adjacent.filter( p => !G.player.units.map( u => u.place ).includes(p)),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if ( G.places[choices.fight.unit.place].adjacent.filter( p => !player.units.map( u => u.place ).includes(p)).includes( c ) ) {\r\n                                G.choices.fight.unit.place = c\r\n                                G.choices.fight.enemy.pains--\r\n                                forceRerender()\r\n                            }\r\n                            if ( !G.choices.fight.enemy.pains || !G.choices.fight.enemy.units.filter( u => u.place == G.choices.fight.place ).length ) {\r\n                                endPhase()\r\n                                G.choices.fight.place = null\r\n                                G.choices.fight.enemy = null\r\n                                G.choices.fight.unit = null\r\n                            } else\r\n                                setStage('assignpretreats')\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        hire : {\r\n            lim,\r\n            start : 'place',\r\n            stages : {\r\n                place : {\r\n                    options : f => Object.keys(G.places).filter( p => G.player.units.map( u => u.places ).includes(p) ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'place' && G.player.units.map( u => u.places ).includes(c) ) {\r\n                                G.choices.hire.place = c\r\n                                let u = G.player.units.find( u => u.place == '' && u.type == 'cult')\r\n                                if (!u) setPhase('action')\r\n                                u.place = c\r\n                                G.player.power--\r\n                                G.choices.hire.place = null\r\n                                endPhase()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        open : {\r\n            lim,\r\n            start : 'place',\r\n            stages : {\r\n                place : {\r\n                    options : f => Object.keys(G.places).filter( p => !G.places[p].gate && G.player.units.filter( u => u.type == 'cult' ).map( u => u.place ).includes(p) ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'place' && G.player.units.filter( u => u.type == 'cult' ).map( u => u.place ).includes(c) ) {\r\n                                G.choices.open.place = c\r\n                                G.places[choices.open.place].gate = 1\r\n                                G.player.power-=3\r\n                                endPhase()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        summon : {\r\n            lim,\r\n            start : 'unit',\r\n            stages : {\r\n                unit : {\r\n                    next : 'place',\r\n                    options : f => G.player.units.filter( u => !G.places[u.place] && u.cost <= G.player.power),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'unit' && !G.places[c.place] && c.cost <= G.player.power /*&& !(places[c.place].tokens.includes('iceage') && player.power < 2)*/) {\r\n                                G.choices.summon.unit = c\r\n                                endStage()\r\n                            }\r\n                        },\r\n                        done : f => {\r\n                            endPhase()\r\n                        }\r\n                    },\r\n                },\r\n                place : {\r\n                    options : f => G.player.units.filter( u => u.gate ).map( u => u.place ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'place' && G.player.units.filter( u => u.gate ).map( u => u.place ).includes(c)) {\r\n                                G.choices.summon.place = c\r\n                                G.choices.summon.unit.place = c\r\n                                G.player.power -= choices.summon.unit.cost\r\n                                G.choices.summon.unit = null\r\n                                G.choices.summon.place = null\r\n                                forceRerender()\r\n                                endStage()\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n            }\r\n        },\r\n        steal : {\r\n            lim,\r\n            start : 'place',\r\n            stages : {\r\n                place : {\r\n                    next : 'unit',\r\n                    options : f => Object.keys(G.places).filter( p => stealableUnitsIn(p).length ),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'place' && stealableUnitsIn(c).length ) {\r\n                                G.choices.steal.place = c\r\n                                endStage()\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                unit : {\r\n                    options : f => stealableUnitsIn(G.choices.steal.place),\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'unit' && stealableUnitsIn(G.choices.steal.place).map( u => u.id).includes(c.id) /*&& !(places[c.place].tokens.includes('iceage') && player.power < 2)*/) {\r\n                                G.choices.steal.unit = c\r\n                                c.place = player.faction.name\r\n                                G.choices.steal.unit = null\r\n                                G.choices.steal.place = null\r\n                                endPhase()\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n            }\r\n        },\r\n        book : {\r\n            start : 'book',\r\n            stages : {\r\n                book : {\r\n                    options : f => G.player.faction.books,\r\n                    moves : {\r\n                        choose : (np, c) => {\r\n                            if (np == 'book' && G.player.faction.books.includes(c) ) {\r\n                                G.choices.book.book = c\r\n                                G.player.books = [...G.player.books, G.choices.book.book ]\r\n                                G.player.faction.bookreqs = G.player.faction.bookreqs.filter( b => !b['waiting...'])\r\n                                G.player.faction.books = G.player.faction.books.filter( b => b != G.choices.book.book)\r\n                                returnStage()\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n            }\r\n        },\r\n    }\r\n\r\n    let stealableUnitsIn = (p) => {\r\n            let tmpunits = []\r\n            G.players.map ( pl => {\r\n                tmpunits = [...G.units, ...pl.units.filter( u => u.place == p )]\r\n            })\r\n            dom = []\r\n            tmpunits.map( u => \r\n                dom[u.owner.faction.name] = (dom[u.owner.faction.name] < u.tier) \r\n                    ? u.tier : dom[u.owner.faction.name]\r\n            )\r\n            tmpunits.filter( u => \r\n                u.tier = 0 && dom[u.owner.faction.name] < dom[G.player.faction.name] \r\n            )\r\n            return tmpunits\r\n    }\r\n    let calcDamage = (p) => {\r\n        let r = roll( p.units.filter( u => u.place == choices.fight.place ).map( u => typeof u.combat == 'function' ? u.combat() : u.combat ) )\r\n        p.kills = r.filter( e => e > 4 ).length\r\n        p.pains = r.filter( e => e < 5 && e > 2).length\r\n    }\r\n    let forceRerender = f => {\r\n        \r\n        G.units = G.units\r\n        G.players = G.players\r\n    }\r\n\r\n</script>\r\n<style lang=\"stylus\">.hud {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 10;\n  display: flex;\n  flex-direction: row;\n}\n.hud ul {\n  list-style-type: none;\n}\n.hud ul li {\n  width: 90%;\n  border-bottom: 0.1em solid;\n  margin: 0.2em;\n  font-size: 2em;\n}\n.actions {\n  position: absolute;\n  height: 4vh;\n  font-family: arial;\n  margin: 0.5%;\n  padding: 0.1em;\n  text-align: center;\n  padding-left: 2em;\n  padding-right: 2em;\n  border: 0.1em solid #000;\n  box-sizing: border-box;\n  box-shadow: 1px 1px 4px 1px rgba(0,0,0,0.667);\n  overflow: hidden;\n  top: 0;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  right: 1%;\n  color: #ababab;\n  background: #323232;\n  transition: height 0.5s;\n}\n.actions:hover {\n  height: 90vh;\n}</style>\r\n\r\n<!-- prettier-ignore -->\r\n<Map {...G}></Map><div class=\"hud\"><div class=\"actions\">actions<ul> {#each actions as action}{#if G.stage.includes(\"unit\")}<li on:click=\"{(function c(){G.choose(G.stage,action)})}\">{action.type}</li>{:else}<li on:click=\"{(function c(){G.choose(G.stage,action)})}\">{action}</li>{/if}{/each}{#if G.phases[G.phase].stages && G.phases[G.phase].stages[G.stage].moves.done}<li on:click=\"{G.phases[G.phase].stages[G.stage].moves.done}\">done</li>{:else if G.phases[G.phase].moves && G.phases[G.phase].moves.done}<li on:click=\"{G.phases[G.phase].moves.done}\">done</li>{/if}</ul></div>{#each G.players as player}<Player choose=\"{G.choose}\" {player}></Player>{/each}</div>\r\n",
    "<script lang=\"javascript\">\r\n    import { createEventDispatcher } from 'svelte';\r\n    import Unit from './Unit.svelte'\r\n    import {onMount} from 'svelte'\r\n    export let units = []\r\n    export let choose\r\n    onMount(x=>{})\r\n    let dispatch = createEventDispatcher();\r\n    let click = e => choose('place',e.target.getAttribute('name'))\r\n    let arcticocean, northpacific, northamerica, northatlantic, scandinavia, europe, northasia, southamerica, southasia, arabia, westafrica, indianocean, eastafrica, antarctica, southatlantic, southpacific, australia;\r\n    export let places ={}\r\n    import { quintOut } from 'svelte/easing';\r\n    import { crossfade } from 'svelte/transition';\r\n    import { flip } from 'svelte/animate';\r\n    \r\n\r\n\tconst [send, receive] = crossfade({\r\n\t\tduration: d => Math.sqrt(d * 200),\r\n\r\n\t\tfallback(node, params) {\r\n\t\t\tconst style = getComputedStyle(node);\r\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tduration: 600,\r\n\t\t\t\teasing: quintOut,\r\n\t\t\t\tcss: t => `\r\n\t\t\t\t\ttransform: ${transform} scale(${t});\r\n\t\t\t\t\topacity: ${t}\r\n\t\t\t\t`\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n</script>\r\n<style lang=\"stylus\">.grid {\n  z-index: 9;\n}\n.grid,\n.grid2 {\n  top: 5%;\n  left: 2%;\n  right: 2%;\n  bottom: 2%;\n  background-image: url(\"./../earth35.png\");\n  display: grid;\n  background-size: 100% 100%;\n  grid-template-rows: repeat(13, 6.66%);\n  grid-template-columns: repeat(15, 6.66%);\n  position: absolute;\n}\n.arcticocean {\n  grid-column: 1/17;\n  background: rgba(0,0,0,0);\n}\n.northpacific {\n  grid-column: 1/3;\n  grid-row: 4/9;\n  background: rgba(0,0,0,0);\n}\n.northamerica {\n  grid-column: 3/6;\n  grid-row: 4/8;\n  background: rgba(0,0,0,0);\n}\n.northatlantic {\n  grid-column: 6/9;\n  grid-row: 6/10;\n  background: rgba(0,0,0,0);\n}\n.scandinavia {\n  grid-column: 10/13;\n  grid-row: 3/4;\n  background: rgba(0,0,0,0);\n}\n.europe {\n  grid-column: 8/12;\n  grid-row: 5/6;\n  background: rgba(0,0,0,0);\n}\n.northasia {\n  grid-column: 13/15;\n  grid-row: 3/span 2;\n  background: rgba(0,0,0,0);\n}\n.arabia {\n  grid-column: 12/14;\n  grid-row: 6/span 4;\n  background: rgba(0,0,0,0);\n}\n.indianocean {\n  grid-column: 13/17;\n  grid-row: 11/15;\n  background: rgba(0,0,0,0);\n}\n.southasia {\n  grid-column: 14/17;\n  grid-row: 5/span 4;\n  background: rgba(0,0,0,0);\n}\n.southamerica {\n  grid-column: 5/7;\n  grid-row: 10/span 3;\n  background: rgba(0,0,0,0);\n}\n.westafrica {\n  grid-column: 9/11;\n  grid-row: 8/span 3;\n  background: rgba(0,0,0,0);\n}\n.southpacific {\n  grid-column: 3/7;\n  grid-row: 14/span 2;\n  background: rgba(0,0,0,0);\n}\n.southatlantic {\n  grid-column: 7/11;\n  grid-row: 12/span 3;\n  background: rgba(0,0,0,0);\n}\n.eastafrica {\n  grid-column: 11/13;\n  grid-row: 10/span 3;\n  background: rgba(0,0,0,0);\n}\n.australia {\n  grid-column: 1/4;\n  grid-row: 11/span 3;\n  background: rgba(0,0,0,0);\n}\n.antarctica {\n  grid-column: 7/15;\n  grid-row: 15/16;\n  background: rgba(0,0,0,0);\n}\n.grid2 {\n  position: absolute;\n  z-index: 10;\n  background-image: none;\n  background: rgba(85,85,85,0.2);\n}\n.l {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(1em, 3em));\n  align-content: center;\n  box-sizing: border-box;\n  padding: 1em;\n  row-gap: 0.5em;\n  justify-content: center;\n  align-items: center;\n}</style>\r\n\r\n<!-- prettier-ignore -->\r\n<div class=\"grid2\"><div class=\"l arcticocean\" bind:this=\"{arcticocean}\" name=\"arcticocean\" on:click=\"{click}\">{#each units.filter(u=>u.place=='arcticocean') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l northpacific\" bind:this=\"{northpacific}\" name=\"northpacific\" on:click=\"{click}\">{#each units.filter(u=>u.place=='northpacific') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l northamerica\" bind:this=\"{northamerica}\" name=\"northamerica\" on:click=\"{click}\">{#each units.filter(u=>u.place=='northamerica') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l northatlantic\" bind:this=\"{northatlantic}\" name=\"northatlantic\" on:click=\"{click}\">{#each units.filter(u=>u.place=='northatlantic') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l scandinavia\" bind:this=\"{scandinavia}\" name=\"scandinavia\" on:click=\"{click}\">{#each units.filter(u=>u.place=='scandinavia') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l europe\" bind:this=\"{europe}\" name=\"europe\" on:click=\"{click}\">{#each units.filter(u=>u.place=='europe') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l northasia\" bind:this=\"{northasia}\" name=\"northasia\" on:click=\"{click}\">{#each units.filter(u=>u.place=='northasia') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l southamerica\" bind:this=\"{southamerica}\" name=\"southamerica\" on:click=\"{click}\">{#each units.filter(u=>u.place=='southamerica') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l southasia\" bind:this=\"{southasia}\" name=\"southasia\" on:click=\"{click}\">{#each units.filter(u=>u.place=='southasia') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l arabia\" bind:this=\"{arabia}\" name=\"arabia\" on:click=\"{click}\">{#each units.filter(u=>u.place=='arabia') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l westafrica\" bind:this=\"{westafrica}\" name=\"westafrica\" on:click=\"{click}\">{#each units.filter(u=>u.place=='westafrica') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l indianocean\" bind:this=\"{indianocean}\" name=\"indianocean\" on:click=\"{click}\">{#each units.filter(u=>u.place=='indianocean') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l eastafrica\" bind:this=\"{eastafrica}\" name=\"eastafrica\" on:click=\"{click}\">{#each units.filter(u=>u.place=='eastafrica') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l antarctica\" bind:this=\"{antarctica}\" name=\"antarctica\" on:click=\"{click}\">{#each units.filter(u=>u.place=='antarctica') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l southatlantic\" bind:this=\"{southatlantic}\" name=\"southatlantic\" on:click=\"{click}\">{#each units.filter(u=>u.place=='southatlantic') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l southpacific\" bind:this=\"{southpacific}\" name=\"southpacific\" on:click=\"{click}\">{#each units.filter(u=>u.place=='southpacific') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div><div class=\"l australia\" bind:this=\"{australia}\" name=\"australia\" on:click=\"{click}\">{#each units.filter(u=>u.place=='australia') as unit (unit.id)}<div in:receive=\"{{key: unit.id}}\" out:send=\"{{key: unit.id}}\" animate:flip=\"{{duration: 200}}\"><Unit unit=\"{unit}\" {choose}></Unit></div>{/each}</div></div><div class=\"grid\"> </div>\r\n",
    "<script lang=\"javascript\">\r\n    export let choose,player\r\n    import { createEventDispatcher } from 'svelte';\r\n    let dispatch = createEventDispatcher();\r\n    import {onMount} from 'svelte'\r\n    let el\r\n    onMount(x=>{\r\n        el.style.background = 'linear-gradient(70deg,#363636,'+player.faction.color+')'\r\n    })\r\n    let click = e => {\r\n        e.stopPropagation()\r\n        choose('player',player)\r\n    }\r\n</script>\r\n<style lang=\"stylus\">.player {\n  padding: 1em;\n  margin: 1em;\n  border: 0.4em solid #000;\n  box-sizing: border-box;\n  box-shadow: 1px 1px 4px 1px rgba(0,0,0,0.667);\n  position: relative;\n  color: #121212;\n}\n.player2 {\n  height: 3.4vh;\n  margin: 0.5%;\n  padding: 0.1em;\n  padding-left: 0.8em;\n  padding-right: 0.8em;\n  border: 0.1em solid #000;\n  box-sizing: border-box;\n  box-shadow: 1px 1px 4px 1px rgba(0,0,0,0.667);\n  position: relative;\n  color: #121212;\n  font-family: arial;\n  transition: height 0.5s;\n}\n.player2 .details {\n  height: 0em;\n  overflow: hidden;\n  transition: height 0.5s;\n}\n.player2 .details li {\n  text-align: center;\n  list-style-type: none;\n  width: 90%;\n  border-bottom: 0.1em solid;\n  margin: 0.2em;\n}\n.player2:hover {\n  height: 30vh;\n}\n.player2:hover .details {\n  height: 9em;\n}</style>\r\n\r\n<!-- prettier-ignore -->\r\n<!-- \r\n.player(bind:this='{el}' on:click='{click}') {player.faction.name}\r\nul\r\n    li doom {player.doom}\r\n    li power {player.power}\r\n    li spellbooks -->\r\n<div class=\"player2\" bind:this=\"{el}\" on:click=\"{click}\">{player.faction.name} | dm {player.doom} | pw {player.power} | sb {player.books.length}<ul class=\"details\"> {#each player.faction.bookreqs as book}<li>{Object.keys(book)[0]}</li>{/each}</ul></div>\r\n",
    "<script lang=\"javascript\">\r\n    export let choose\r\n    import { createEventDispatcher } from 'svelte';\r\n    let dispatch = createEventDispatcher();\r\n    export let unit = {owner:{faction:{color:'black'}}}\r\n    import {onMount} from 'svelte'\r\n    let el\r\n    onMount(x=>{\r\n        el.style.background = unit.owner.faction.color\r\n    })\r\n    let click = e => {\r\n        e.stopPropagation()\r\n        choose('unit',unit)\r\n    }\r\n    let gate = unit.gate\r\n</script>\r\n<style lang=\"stylus\">.unit {\n  width: 2em;\n  height: 2em;\n  border: 0.4em solid #000;\n  box-sizing: border-box;\n  box-shadow: 1px 1px 4px 1px rgba(0,0,0,0.667);\n  position: relative;\n}\n.gate:before {\n  content: '';\n  z-index: -1;\n  position: absolute;\n  border-radius: 50%;\n  top: -0.8em;\n  bottom: -0.8em;\n  left: -0.8em;\n  right: -0.8em;\n  box-shadow: 1px 1px 4px 1px rgba(0,0,0,0.667);\n  background: #ddd;\n}</style>\r\n\r\n<!-- prettier-ignore -->\r\n<div class=\"unit\" bind:this=\"{el}\" on:click=\"{click}\" class:gate></div>\r\n"
  ],
  "names": [],
  "mappings": "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"
}